{
	"info": {
		"_postman_id": "7e801ccc-6f91-4233-8cd8-452a204b8342",
		"name": "TellUrStori",
		"description": "The collection includes a set of predefined requests for interacting with the TellUrStori API, allowing you to manage and test functionalities related to users, threads, and AI-generated content such as texts, images, and audios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12086068"
	},
	"item": [
		{
			"name": "generated audios",
			"item": [
				{
					"name": "GET generated audios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each audio should have required properties\", function() {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('audioType');",
									"        pm.expect(item).to.have.property('duration');",
									"        pm.expect(item).to.have.property('url');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_audios"
							]
						},
						"description": "This request retrieves all audio files generated by a specific user. It is useful for displaying a user's entire library of generated audios, allowing them to browse and manage their creative outputs. The response includes details such as audio titles, types, URLs, and more."
					},
					"response": []
				},
				{
					"name": "GET generated audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains audio details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('audioType');",
									"    pm.expect(jsonData).to.have.property('duration');",
									"    pm.expect(jsonData).to.have.property('url');",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"audioId\")); // Assuming 'audioId' is set in the environment or global variables",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_audios",
								"{{id}}"
							]
						},
						"description": "Fetches a specific generated audio file using its unique identifier. This request is intended for when users or applications need to access or review the details of a particular audio asset. The response provides comprehensive information about the audio, including its URL, duration, and other attributes."
					},
					"response": []
				},
				{
					"name": "Update generated audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains audio details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('audioType');",
									"    pm.expect(jsonData).to.have.property('duration');",
									"    pm.expect(jsonData).to.have.property('url');",
									"    pm.expect(jsonData.title).to.eql(pm.request.body.json().title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"audioType\": \"music\",\n    \"duration\": 8,\n    \"generatedAudioUrl\": \"https://example.com/reggae.wav\",\n    \"loudnessCompressor\": true,\n    \"melody\": \"./bach.mp3\",\n    \"positivePrompt\": \"roots reggae music with loud bass\",\n    \"strategy\": \"loudness\",\n    \"title\": \"reggae\",\n    \"unconditional\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_audios",
								"{{id}}"
							]
						},
						"description": "Allows users to update the metadata of an existing generated audio file. This could involve changing the title, modifying the audio type, or adjusting other settings like the melody or the duration. This request ensures that users can maintain relevance and accuracy in their audio library."
					},
					"response": []
				},
				{
					"name": "Create generated audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Generated audio updated successfully.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"audioType\": \"music\",\n    \"duration\": 8,\n    \"generatedAudioUrl\": \"https://example.com/pop.wav\",\n    \"loudnessCompressor\": true,\n    \"melody\": \"./bach.mp3\",\n    \"positivePrompt\": \"top 10 hit song\",\n    \"strategy\": \"loudness\",\n    \"title\": \"pop\",\n    \"unconditional\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_audios"
							]
						},
						"description": "Enables the creation of a new audio file through TellUrStori based on user inputs such as audio type, duration, and a positive prompt. This endpoint is crucial for users looking to expand their portfolio of generated audios, allowing for creativity and customization in audio production."
					},
					"response": []
				},
				{
					"name": "DELETE generated audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty on deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_audios",
								"{{id}}"
							]
						},
						"description": "Provides the functionality to delete a specific generated audio file. This is necessary for managing the digital space and ensuring that users can curate their libraries by removing outdated or unwanted audios. The deletion process is straightforward, requiring only the specific audio's identifier."
					},
					"response": []
				}
			],
			"description": "This folder contains API requests for managing audio assets generated via TellUrStori. Users can retrieve all generated audios or a specific audio, update metadata of an audio, create new audio assets based on provided prompts and settings, and delete audios. These operations enable dynamic interaction with user-driven AI-generated content, enhancing creative outputs such as music or sound effects."
		},
		{
			"name": "generated images",
			"item": [
				{
					"name": "GET generated images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each image should have required properties\", function() {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('imageUrl');",
									"        pm.expect(item).to.have.property('width');",
									"        pm.expect(item).to.have.property('height');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_images"
							]
						},
						"description": "This request fetches all image assets created by a specific user, showcasing their entire collection of TellUrStori-generated images. It is useful for applications that need to display a gallery or manage an inventory of creative visual content. The response includes details such as image URLs, dimensions, and the prompts used for generation."
					},
					"response": []
				},
				{
					"name": "GET generated image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains image details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('imageUrl');",
									"    pm.expect(jsonData).to.have.property('width');",
									"    pm.expect(jsonData).to.have.property('height');",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"imageId\")); // Assuming 'imageId' is set in the environment or global variables",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_images",
								"{{id}}"
							]
						},
						"description": "Retrieves a specific generated image using its unique identifier. This endpoint is essential for accessing detailed information about a particular image, such as its resolution, associated creative prompts, and URL. It enables users or applications to highlight or review individual pieces of generated artwork."
					},
					"response": []
				},
				{
					"name": "Update generated image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Generated image updated successfully.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batchSize\": 1,\n    \"generatedImageUrl\": \"https://example.com/1709001825.png\",\n    \"height\": 512,\n    \"id\": 6,\n    \"negativePrompt\": \"\",\n    \"positivePrompt\": \"a spacehip on the brink of an event horizon\",\n    \"samplingSteps\": 20,\n    \"scale\": 12,\n    \"seed\": 1,\n    \"width\": 512\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_images",
								"{{id}}"
							]
						},
						"description": "Allows for the modification of existing generated images' metadata. Users can update aspects like the positive or negative prompts, change dimensions, or adjust other generation parameters. This functionality is crucial for refining visual content and aligning it more closely with evolving creative goals or feedback."
					},
					"response": []
				},
				{
					"name": "Create generated image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains image details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('imageUrl');",
									"    pm.expect(jsonData).to.have.property('width');",
									"    pm.expect(jsonData).to.have.property('height');",
									"    pm.expect(jsonData.title).to.eql(pm.request.body.json().title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batchSize\": 1,\n    \"height\": 512,\n    \"negativePrompt\": \"\",\n    \"positivePrompt\": \"a cowboy\",\n    \"samplingSteps\": 20,\n    \"scale\": 12,\n    \"seed\": 54344,\n    \"width\": 512\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/img2img",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"img2img"
							]
						},
						"description": "Enables the creation of a new image based on user-defined criteria, including prompts and visual parameters like width, height, and scale. This request taps into TellUrStori to produce customized visual content, expanding the user's creative portfolio and offering unique artwork for various applications."
					},
					"response": []
				},
				{
					"name": "DELETE generated image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty on deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"generated_images",
								"{{id}}"
							]
						},
						"description": "Provides the means to remove a specific image from the user's collection. This endpoint is important for managing digital assets, allowing users to maintain an organized and relevant gallery by discarding images that no longer serve their purpose or meet their creative standards."
					},
					"response": []
				}
			],
			"description": "This folder manages image assets created through TellUrStori, guided by positive and negative prompts. APIs allow for the retrieval of all images or specific ones, updating image attributes, creating new images tailored to user inputs, and deleting images. It is designed for users to explore and manipulate visual content, promoting innovative art or design projects."
		},
		{
			"name": "generated texts",
			"item": [
				{
					"name": "GET generated texts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each text should have required properties\", function() {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('content');",
									"        pm.expect(item).to.have.property('prompt');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}/generated_texts",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}",
								"generated_texts"
							]
						},
						"description": "This request retrieves all text entries generated within a specific thread by a user. It's useful for applications that need to display a collection or sequence of AI-generated texts, allowing users to review or manage their textual outputs. The response provides details about each text, including its content and associated prompts."
					},
					"response": []
				},
				{
					"name": "GET generated text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains text details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('prompt');",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"textId\")); // Assuming 'textId' is set in the environment or global variables",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}/generated_texts/{{generated_text_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}",
								"generated_texts",
								"{{generated_text_id}}"
							]
						},
						"description": "Fetches a specific generated text using its unique identifier within a thread. This endpoint is essential for accessing detailed information about a particular text entry, such as its generation parameters and content. It enables focused review or use of individual text pieces in broader applications."
					},
					"response": []
				},
				{
					"name": "Update generated text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Generated text updated successfully.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"generatedTextType\": \"request\",\n    \"id\": 1,\n    \"maxBatchSize\": 6,\n    \"maxGenLen\": 512,\n    \"maxSeqLen\": 512,\n    \"positivePrompt\": \"how near is the edge of the known universe from Earth?\",\n    \"seed\": 1,\n    \"temperature\": 0.6,\n    \"topP\": 0.9\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}/generated_texts/{{generated_text_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}",
								"generated_texts",
								"{{generated_text_id}}"
							]
						},
						"description": "Allows users to update the parameters or content of an existing generated text. Users can modify aspects like the generation prompts, adjust the maximum generation length, or change other settings that influence the AI's output. This request is crucial for iterative content creation, where texts are refined based on feedback or new requirements."
					},
					"response": []
				},
				{
					"name": "Create generated text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains text details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('prompt');",
									"    pm.expect(jsonData.prompt).to.eql(pm.request.body.json().prompt);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"generatedTextType\": \"request\",\n    \"maxBatchSize\": 6,\n    \"maxGenLen\": 512,\n    \"maxSeqLen\": 512,\n    \"positivePrompt\": \"Please tell me more\",\n    \"seed\": 1,\n    \"temperature\": 0.6,\n    \"topP\": 0.9\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}/generated_texts",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}",
								"generated_texts"
							]
						},
						"description": "Enables the creation of a new text entry within a thread based on user inputs such as prompts and specific AI generation settings like seed and temperature. This endpoint taps into AI capabilities to produce tailored textual content, providing users with tools to generate diverse and creative text outputs efficiently."
					},
					"response": []
				},
				{
					"name": "DELETE generated text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty on deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}/generated_texts/{{generated_text_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}",
								"generated_texts",
								"{{generated_text_id}}"
							]
						},
						"description": "Provides the functionality to delete a specific text entry from a thread. This is important for content management, allowing users to curate their text outputs by removing entries that are outdated, irrelevant, or do not meet quality standards. It helps maintain a clean and relevant collection of generated texts."
					},
					"response": []
				}
			],
			"description": "Focused on text generation, this folder includes APIs to fetch, create, update, and delete TellUrStori generated texts within user-defined threads. Each API interacts with textual content influenced by various parameters like prompts and generation settings, catering to users looking to enhance narratives or generate content dynamically."
		},
		{
			"name": "threads",
			"item": [
				{
					"name": "GET threads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each thread should have required properties\", function() {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('updatedAt');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads"
							]
						},
						"description": "Provides the functionality to delete a specific text entry from a thread. This is important for content management, allowing users to curate their text outputs by removing entries that are outdated, irrelevant, or do not meet quality standards. It helps maintain a clean and relevant collection of generated texts."
					},
					"response": []
				},
				{
					"name": "GET thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}"
							]
						},
						"description": "Fetches a specific thread using its unique identifier. This endpoint is useful for accessing detailed information about a particular thread, including its title and the generated texts it contains. It allows users or applications to focus on a single collection of texts, facilitating detailed reviews or further content development."
					},
					"response": []
				},
				{
					"name": "Update thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n\t\"title\": \"a long story\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}"
							]
						},
						"description": "Enables users to update details of an existing thread, such as its title. This functionality is important for maintaining relevance and accuracy in the description or purpose of the thread as projects evolve or new insights are gained. It ensures that the organizational structure remains flexible and responsive to the user's creative process."
					},
					"response": []
				},
				{
					"name": "Create thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"the neverending story\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads"
							]
						},
						"description": "Allows for the creation of a new thread, essentially starting a new project or collection of generated texts. Users can define the title of the thread, setting the thematic or contextual groundwork for the texts that will be generated within it. This endpoint is key for expanding the user's creative endeavors and organizing new content generation initiatives."
					},
					"response": []
				},
				{
					"name": "DELETE thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}",
								"threads",
								"{{id}}"
							]
						},
						"description": "Provides the capability to delete an entire thread. This is crucial for managing the overall structure of a user's projects, allowing them to remove entire collections of texts that are no longer needed or relevant. It helps users keep their creative space organized and focused on current projects."
					},
					"response": []
				}
			],
			"description": "This folder provides API endpoints for managing threads, which are collections of generated texts. Users can retrieve all threads or a specific one, create new threads, update thread details, and delete them. Threads organize multiple TellUrStori-generated texts, facilitating structured storytelling or content creation."
		},
		{
			"name": "users",
			"item": [
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each user should have required properties\", function() {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('username');",
									"        pm.expect(item).to.have.property('email');",
									"        pm.expect(item).to.have.property('name');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						},
						"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
					},
					"response": []
				},
				{
					"name": "GET user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.username).to.eql(pm.variables.get(\"username\")); // Assuming 'username' is set in the environment or global variables",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}"
							]
						},
						"description": "Fetches detailed information about a specific user using their unique username. This endpoint is essential for accessing comprehensive details such as the user's name, email, and profile picture URL. It enables focused user management and support activities, including profile reviews and updates."
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms update\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"User updated successfully.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountPictureUrl\": \"https://example.com/images/username.png\",\n    \"email\": \"username@example.com\",\n    \"name\": \"updated test person\",\n    \"username\": \"testpersonUpdated\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}"
							]
						},
						"description": "Allows for updating a user's profile information. Users or administrators can modify details like the user's name, email, username, and profile picture URL. This functionality is crucial for keeping user information current and accurate, supporting both user-driven updates and administrative modifications."
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.username).to.eql(pm.request.body.json().username);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountPictureUrl\": \"https://example.com/images/username.png\",\n    \"email\": \"username@example.com\",\n    \"name\": \"example name\",\n    \"username\": \"username\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						},
						"description": "Enables the creation of a new user account with details such as name, username, email, and profile picture URL provided in the request. This endpoint is key for expanding the user base, allowing new users to register and start using the application's features."
					},
					"response": []
				},
				{
					"name": "DELETE user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty on deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/users/{{username}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{username}}"
							]
						},
						"description": "Provides the functionality to delete a specific user's account. This is important for managing the lifecycle of user data, allowing for the removal of accounts that are no longer active or required. It helps maintain the integrity and relevance of the user base."
					},
					"response": []
				}
			],
			"description": "APIs in this folder handle user data. It includes functionalities to retrieve all users or a specific user by username, update user profiles, create new user accounts, and delete users. This section supports user management functionalities essential for personalized user experiences within the app."
		},
		{
			"name": "negative tests",
			"item": [
				{
					"name": "generated audios",
					"item": [
						{
							"name": "/users/{{username}}/generated_audios",
							"item": [
								{
									"name": "PUT generated_audios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_audios"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "PATCH generated_audios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_audios"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "DELETE generated_audios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_audios"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						},
						{
							"name": "/users/{{username}}/generated_audios/{{id}}",
							"item": [
								{
									"name": "GET undefined username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios/{{id}}",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_audios",
												"{{id}}"
											]
										},
										"description": "Fetches detailed information about a specific user using their unique username. This endpoint is essential for accessing comprehensive details such as the user's name, email, and profile picture URL. It enables focused user management and support activities, including profile reviews and updates."
									},
									"response": []
								},
								{
									"name": "POST user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_audios/{{id}}",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_audios",
												"{{id}}"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "generated images",
					"item": [
						{
							"name": "/users/{{username}}/generated_images",
							"item": [
								{
									"name": "PUT generated_images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_images"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "PATCH generated_images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_images"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "DELETE generated_images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_images"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						},
						{
							"name": "/users/{{username}}/generated_images/{{id}}",
							"item": [
								{
									"name": "GET undefined generated image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images/10",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_images",
												"10"
											]
										},
										"description": "Fetches detailed information about a specific user using their unique username. This endpoint is essential for accessing comprehensive details such as the user's name, email, and profile picture URL. It enables focused user management and support activities, including profile reviews and updates."
									},
									"response": []
								},
								{
									"name": "POST user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/generated_images/{{id}}",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"generated_images",
												"{{id}}"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "threads",
					"item": [
						{
							"name": "/users/{{username}}/threads",
							"item": [
								{
									"name": "PUT threads",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/threads",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"threads"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "PATCH threads",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/threads",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"threads"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "DELETE threads",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/threads",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"threads"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						},
						{
							"name": "/users/{{username}}/threads/{{id}}",
							"item": [
								{
									"name": "GET undefined thread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/10",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"threads",
												"10"
											]
										},
										"description": "Fetches detailed information about a specific user using their unique username. This endpoint is essential for accessing comprehensive details such as the user's name, email, and profile picture URL. It enables focused user management and support activities, including profile reviews and updates."
									},
									"response": []
								},
								{
									"name": "POST thread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}/threads/{{id}}",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}",
												"threads",
												"{{id}}"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "/users",
							"item": [
								{
									"name": "PUT users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "PATCH users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								},
								{
									"name": "DELETE users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						},
						{
							"name": "/users/{username}",
							"item": [
								{
									"name": "GET undefined username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/undefinedusername",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"undefinedusername"
											]
										},
										"description": "Fetches detailed information about a specific user using their unique username. This endpoint is essential for accessing comprehensive details such as the user's name, email, and profile picture URL. It enables focused user management and support activities, including profile reviews and updates."
									},
									"response": []
								},
								{
									"name": "POST user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}:{{port}}/users/{{username}}",
											"host": [
												"{{base_url}}"
											],
											"port": "{{port}}",
											"path": [
												"users",
												"{{username}}"
											]
										},
										"description": "This request retrieves a list of all users registered in the application. It's useful for administrative purposes, allowing for an overview of user engagement and account details. This endpoint supports management tasks and provides insights into the user base of the application."
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}